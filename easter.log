   0: /* Test program 'easter'
   2:                 ========
   3:    Computes Easter Sunday for the years 2010-2020. 
   4: */
   5: 
   6: int mod (int x, int y)
parser:   <program>
parser:     <type>
parser:     </type>
parser:     <func decl>
parser:       <type>
parser:       </type>
parser:       <param decl>
parser:       </param decl>
   7: { /* Computes x%y */
parser:       <type>
parser:       </type>
parser:       <param decl>
parser:       </param decl>
   8:   return x - (x/y*y);
parser:       <func body>
parser:         <statm list>
parser:           <statement>
parser:             <return-statm>
parser:               <expression>
parser:                 <term>
parser:                   <factor>
parser:                     <primary>
parser:                       <operand>
parser:                         <variable>
parser:                         </variable>
parser:                       </operand>
parser:                     </primary>
parser:                   </factor>
parser:                   <term opr>
parser:                   </term opr>
parser:                   <factor>
parser:                     <primary>
parser:                       <operand>
parser:                         <inner expr>
parser:                           <expression>
parser:                             <term>
parser:                               <factor>
parser:                                 <primary>
parser:                                   <operand>
parser:                                     <variable>
parser:                                     </variable>
parser:                                   </operand>
parser:                                 </primary>
parser:                                 <factor opr>
parser:                                 </factor opr>
parser:                                 <primary>
parser:                                   <operand>
parser:                                     <variable>
parser:                                     </variable>
parser:                                   </operand>
parser:                                 </primary>
parser:                                 <factor opr>
   9: }
parser:                                 </factor opr>
parser:                                 <primary>
parser:                                   <operand>
parser:                                     <variable>
   10: 
   11: int easter (int y)
parser:                                     </variable>
parser:                                   </operand>
parser:                                 </primary>
parser:                               </factor>
parser:                             </term>
parser:                           </expression>
parser:                         </inner expr>
parser:                       </operand>
parser:                     </primary>
parser:                   </factor>
parser:                 </term>
parser:               </expression>
parser:             </return-statm>
parser:           </statement>
parser:         </statm list>
parser:       </func body>
parser:     </func decl>
parser:     <type>
parser:     </type>
parser:     <func decl>
   12: {
parser:       <type>
   13:   int a;  int b;  int c;  int d;  int e;  int f;
parser:       </type>
parser:       <param decl>
parser:       </param decl>
parser:       <func body>
parser:         <type>
parser:         </type>
parser:         <var decl>
parser:         </var decl>
AlboC error in line 13: A semicolonToken expected, but found a intToken: int!
